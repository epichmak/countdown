// Register service worker for PWA
if ("serviceWorker" in navigator) {
    window.addEventListener("load", () => {
        navigator.serviceWorker.register("./sw.js").catch(console.error);
    });
}

const $ = (id) => document.getElementById(id);
const nameEl = $("targetName");
const titleEl = $("targetTitle");
const dEl = $("d");
const hEl = $("h");
const mEl = $("m");
const sEl = $("s");
const dLabel = $("days-label");
const hLabel = $("hours-label");
const mLabel = $("minutes-label");
const sLabel = $("seconds-label");

const titles = [
    {
        "title": "–ñ–∏–∑–Ω—å - —ç—Ç–æ —á–µ—Ä–µ–¥–∞ —Å–æ–±—ã—Ç–π, –º–µ—à–∞—é—â–∏—Ö –Ω–∞–º —Å —Ç–æ–±–æ–π –∑–∞–Ω—è—Ç—å—Å—è —Å–µ–∫—Å–æ–º... üòè",
        "subtitle": "–Ω–æ —Ç–∞–∫ –±—É–¥–µ—Ç —Ç–æ–ª—å–∫–æ –¥–æ..."
    },
    {
        "title": "–î–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ —Ç–≤–æ–∏ –≤–æ–ª–æ—Å—ã —Å–Ω–æ–≤–∞ –Ω–µ –Ω–∞—á–Ω—É—Ç –±–µ—Å–∏—Ç—å üôÉ",
        "subtitle": ""
    },
    {
        "title": "–û—Å—Ç–∞–ª–æ—Å—å —á—É—Ç—å-—á—É—Ç—å –¥–æ —á—É–¥–∞ –ø–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º ‚Äú–º—ã‚Äù üíû",
        "subtitle": ""
    },
    {
        "title": "–û—Ç—Å—á—ë—Ç –¥–æ –∫—Ä–∏–∫–∞ ‚Äú–Ω—É –Ω–∞–∫–æ–Ω–µ—Ü-—Ç–æ!‚Äù ü•π",
        "subtitle": ""
    },
    {
        "title": "–ì–æ—Ç–æ–≤—å—Å—è –∫ –ø–æ—Ü–µ–ª—É—è–º üòòüíã",
        "subtitle": ""
    },
    {
        "title": "–î–æ —Å–ª–∏—è–Ω–∏—è –¥–≤—É—Ö —Å–∫—É—á–∞—é—â–∏—Ö –∫–æ—Ç–∏–∫–æ–≤ üê±‚ù§Ô∏èüê±",
        "subtitle": ""
    },
    {
        "title": "–°–∫–æ—Ä–æ —Å–Ω–æ–≤–∞ –±—É–¥–µ–º –≥–ª—É–ø–æ —É–ª—ã–±–∞—Ç—å—Å—è –±–µ–∑ –ø—Ä–∏—á–∏–Ω—ã üòä",
        "subtitle": ""
    },
    {
        "title": "–ñ–¥—ë–º –º–æ–º–µ–Ω—Ç, –∫–æ–≥–¥–∞ –≤—Ä–µ–º—è –ø–µ—Ä–µ—Å—Ç–∞–Ω–µ—Ç –∏–º–µ—Ç—å —Å–º—ã—Å–ª ‚è≥",
        "subtitle": ""
    },
    {
        "title": "–î–æ –≤—Å—Ç—Ä–µ—á–∏, –ø–æ—Å–ª–µ –∫–æ—Ç–æ—Ä–æ–π –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ –Ω–µ–≤–∞–∂–Ω–æ üí´",
        "subtitle": ""
    },
    {
        "title": "–ü–æ—Ä–∞ –Ω–∞—Ç–æ—á–∏—Ç—å –∫–æ–≥–æ—Ç–∫–∏ –ª—é–±–≤–∏ üêæüòº",
        "subtitle": ""
    },
    {
        "title": "–ü–æ–∫–∞ —Ç—ã —á–∏—Ç–∞–µ—à—å —ç—Ç–æ ‚Äî –º—ã —É–∂–µ –±–ª–∏–∂–µ üí®",
        "subtitle": ""
    },
    {
        "title": "–í—Ä–µ–º—è —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –Ω–∞—Å (—Ä–µ–¥–∫–∏–π —Å–ª—É—á–∞–π) üòâ",
        "subtitle": ""
    },
    {
        "title": "–î–æ –º–æ–º–µ–Ω—Ç–∞, –∫–æ–≥–¥–∞ —Å–Ω–æ–≤–∞ –∑–∞–±—É–¥–µ–º –ø—Ä–æ –≤—Å—ë –≤–æ–∫—Ä—É–≥ üíï",
        "subtitle": ""
    }
];


const meetingData = JSON.parse(localStorage.getItem("gfCountdown") || '{"dt":"2025-11-10T10:15:00.000Z","title":"–û–±–Ω–∏–º–µ–º—Å—è..."}');

// Confetti canvas
const confetti = document.getElementById("confetti");
const ctx = confetti.getContext("2d");

function resizeCanvas() {
    confetti.width = window.innerWidth;
    confetti.height = window.innerHeight;
}

window.addEventListener("resize", resizeCanvas);
resizeCanvas();

let confettiActive = false;
let confettiStart = 0;
const pieces = [];

function makePiece() {
    return {
        x: Math.random() * confetti.width,
        y: -20,
        r: 4 + Math.random() * 6,
        a: Math.random() * Math.PI * 2,
        s: 1 + Math.random() * 3,
        w: 8 + Math.random() * 12,
        h: 6 + Math.random() * 10,
        hue: Math.floor(Math.random() * 360),
        tilt: Math.random() * 2 * Math.PI
    };
}

function startConfetti() {
    confettiActive = true;
    confettiStart = performance.now();
    pieces.length = 0;
    for (let i = 0; i < 220; i++) pieces.push(makePiece());
    document.body.classList.add("celebrate");
    requestAnimationFrame(drawConfetti);
}

function drawConfetti(ts) {
    ctx.clearRect(0, 0, confetti.width, confetti.height);
    for (let i = 0; i < pieces.length; i++) {
        const p = pieces[i];
        p.y += p.s;
        p.x += Math.sin((p.y + p.a) / 30) * 0.8;
        p.tilt += 0.05;
        ctx.save();
        ctx.translate(p.x, p.y);
        ctx.rotate(p.tilt);
        ctx.fillStyle = `hsl(${p.hue} 90% 60%)`;
        ctx.fillRect(-p.w / 2, -p.h / 2, p.w, p.h);
        ctx.restore();
        if (p.y > confetti.height + 20) {
            pieces[i] = makePiece();
        }
    }
    // keep running while app is open (after date), otherwise stop after 9s
    if (isAfterTarget()) {
        requestAnimationFrame(drawConfetti);
    } else if (ts - confettiStart < 9000) {
        requestAnimationFrame(drawConfetti);
    } else {
        confettiActive = false;
        ctx.clearRect(0, 0, confetti.width, confetti.height);
        document.body.classList.remove("celebrate");
    }
}

function isAfterTarget() {
    const data = meetingData
    if (!data.dt) return false;
    const target = new Date(data.dt);
    return (new Date()) - target > 0;
}

// Load saved
const saved = meetingData;

const date = new Date().getDate();
const titleIdx = (date < 20 ? date + 31 : date) - 22;
nameEl.textContent = titles[titleIdx].subtitle || saved.title || "Next date with GF";
titleEl.textContent = titles[titleIdx].title;

function fmtDate(dt) {
    try {
        return dt.toLocaleString([], {dateStyle: "full", timeStyle: "short"});
    } catch (e) {
        return dt.toString();
    }
}

function pluralize(n, forms) {
    // forms: ['–¥–µ–Ω—å', '–¥–Ω—è', '–¥–Ω–µ–π']
    n = Math.abs(n) % 100;
    const n1 = n % 10;
    if (n > 10 && n < 20) return forms[2];
    if (n1 > 1 && n1 < 5) return forms[1];
    if (n1 === 1) return forms[0];
    return forms[2];
}

function tick() {
    const data = meetingData
    if (!data.dt) return;
    const target = new Date(data.dt);

    const now = new Date();
    let diff = Math.max(0, target - now);
    const sec = Math.floor(diff / 1000) % 60;
    const min = Math.floor(diff / 60000) % 60;
    const hr = Math.floor(diff / 3600000) % 24;
    const day = Math.floor(diff / 86400000);

    dEl.textContent = day;
    hEl.textContent = hr;
    mEl.textContent = min;
    sEl.textContent = sec;

    dLabel.textContent = pluralize(day, ['–¥–µ–Ω—å', '–¥–Ω—è', '–¥–Ω–µ–π']);
    hLabel.textContent = pluralize(hr, ['—á–∞—Å', '—á–∞—Å–∞', '—á–∞—Å–æ–≤']);
    mLabel.textContent = pluralize(min, ['–º–∏–Ω—É—Ç–∞', '–º–∏–Ω—É—Ç—ã', '–º–∏–Ω—É—Ç']);
    sLabel.textContent = pluralize(sec, ['—Å–µ–∫—É–Ω–¥–∞', '—Å–µ–∫—É–Ω–¥—ã', '—Å–µ–∫—É–Ω–¥']);

    // Start confetti every time app is opened after the date
    if (!confettiActive && isAfterTarget()) {
        startConfetti();
    }
}

setInterval(tick, 1000);
tick();
